name: CI/CD
on:
  # push:
  #   branches: [main]
  # pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'patch'

jobs:
  ci:
    uses: ./.github/workflows/ci.yml  # use the callable tests job to run tests
  build:
    name: build
    needs: [ci]
    runs-on: [ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Get python version from .python-version
      id: python-version
      run: echo "version=$(cat .python-version)" >> $GITHUB_ENV
    - name: Install python${{ steps.python-version.outputs.version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Install poetry
      uses: Gr1N/setup-poetry@v7

    - name: Build package
      run: poetry build

    - name: Upload built package
      uses: actions/upload-artifact@v3
      with:
        name: test_prj_pd
        path: dist/
        retention-days: 1
  cd:
    name: cd
    needs: [ci, build]
    runs-on: [ubuntu-latest]

    steps:
    - name: Download built package
      uses: actions/download-artifact@v3
      with:
        name: test_prj_pd
        path: dist/

    - name: "check is PYPI_API_TOKEN exists"
      env:
        super_secret: ${{ secrets.PYPI_API_TOKEN }}
      if: ${{ env.super_secret == '' }}
      run: |
        echo "the secret \'PYPI_API_TOKEN\' has not been made"
        echo "Please go to \'settings \> secrets \> actions\' to create it"

    - name: Publish distribution ðŸ“¦ to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - name: Publish distribution ðŸ“¦ to PyPI
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}